{
  "Content": "## Improvements\n\n### disaster-recovery errand supports buddy-broker derived services/plans\n\nAt @starkandwayne we have Dingo PostgreSQL running on AWS and registered privately with [Pivotal Web Service](https://run.pivotal.io) in each of our organizations/spaces. Since Cloud Foundry requires all per-space brokers to have unique GUIDs and names we use https://github.com/cloudfoundry-community/buddy-broker. But Dingo PostgreSQL's `disaster-recovery` errand didn't work with it since it was only looking up a single service GUID.\n\nThis is now fixed. A service/plan registered with https://github.com/cloudfoundry-community/buddy-broker will have GUIDs that\nare prefixed with the root service ID. So we now search thru all\npages of /v2/services, looking for multiple services that\nhave the GUID of or prefixed by the provided root service ID.\n\n### dpg support tool\n\nPreviously only available in `bin/dpg` within the BOSH release,\nthis support tool is now installable as a BOSH job template `dpg-cli`.\nThe spruce templates automatically add it to `router` job.\nIt pre-configures `dpg` with cf, etcd, and service broker credentials;\nand makes `dpg` immediately runnable as `root` user.\n\nTo add `dpg-cli` to `router` job (or any other), add to the job and provide properties:\n\n``` yaml\n- name: router\n  instances: 1\n  templates:\n    - {name: remote-syslog, release: simple-remote-syslog}\n    - {name: broker, release: dingo-postgresql}\n    - {name: router, release: dingo-postgresql}\n    - {name: dpg-cli, release: dingo-postgresql}\n  properties:\n    servicebroker:\n      machines: [127.0.0.1]\n      port: 8889 # internally binding\n      username: starkandwayne\n      password: starkandwayne\n    cf:\n      api_url: ...\n      username: ...\n      password: ...\n      skip_ssl_validation: false\n    etcd:\n      machines: [...]\n```\n\nThen, after `bosh ssh router/0`, change to root user and try `dpg`:\n\n```\nbosh ssh router/0\nsudo su -\ndpg ls\n```\n\nTo see help, run `dpg` without arguments.\n\nExample commands to test drive the support tool:\n\n```\ndpg\ndpg target\ndpg ls\n```\n\nThe first column are the Cloud Foundry service instance IDs, referenced as `INSTANCE_ID` in the `dpg` help above.\n\n```\ndgp status INSTANCE_ID\n```\n\nTo create or delete service instances without Cloud Foundry API/CLI:\n\n```\ndpg create my-first-cluster\ndpg ls\ndpg raw /service/my-first-cluster\ndpg raw /service/my-first-cluster/members\n```\n\nOnce the cluster is up and running:\n\n```\ndpg superuser-psql my-first-cluster\n```\n\nThis will provide a `psql` interactive console:\n\n```\npsql (9.4.5, server 9.5.3)\nWARNING: psql major version 9.4, server major version 9.5.\n         Some psql features might not work.\nType \"help\" for help.\n\npostgres=#\n```\n\nContinuing with example commands:\n\n```\ndpg wale-backup-list my-first-cluster\ndpg delete my-first-cluster\n```\n\nNOTE: `my-first-cluster` will be a long UUID/GUID for values provided by Cloud Foundry; and a value prefixed by `T-` when created by the `sanity-test` errand (which can be deleted if you see them).\n\n### Upgrade to etcd-release v74\n\nCheck for new properties to disable/enable more health logging.\n\nhttps://github.com/cloudfoundry-incubator/etcd-release/\n\n## Upload to BOSH\n\nTo upload BOSH releases:\n\n```\ncurl -s \"https://api.github.com/repos/dingotiles/dingo-postgresql-release/releases/tags/v0.10.1\" | jq -r \".assets[].browser_download_url\"  | grep tgz |   xargs -L1 bosh upload release --skip-if-exists\n```\n\nOr get URLs for BOSH releases:\n\n```\ncurl -s \"https://api.github.com/repos/dingotiles/dingo-postgresql-release/releases/tags/v0.10.1\" | jq -r \".assets[].browser_download_url\"  | grep tgz\n```\n"
}