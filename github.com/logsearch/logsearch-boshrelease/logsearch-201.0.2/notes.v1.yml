{
  "Content": "# v201.0.2 RELEASE NOTES\n\n##### ElasticSearch: 2.2.0\n\n##### LogStash: 2.2.0\n\n##### Kibana: 4.4.0\n\n## Notable job spec changes\n\n#### Haproxy\n\n```\nhaproxy.inbound_port =\u003e haproxy.ingestor.inbound_port\nhaproxy.backend_servers =\u003e haproxy.ingestor.backend_servers\nhaproxy.backend_port =\u003e haproxy.ingestor.backend_port\n```\n\n#### ElasticSearch\n\n```\ndeleted elasticsearch.drain\n```\n\nIf you wish to deploy without executing the drain script you should do the following:\n\n```\n$ bosh deploy --skip-drain elasticsearch_data\n```\n\n## New features\n\n#### New cluster update process\n\nThe wrapping scripts around stopping and starting ElasticSearch data nodes during a deployment upgrade have been significantly changed. There are some caveats to this strategy, see [Known limitations](#known-limitations) for more infomation.  \nNOTE: While we are waiting for a new feature to be added to BOSH a manual step is required to finish a deployment:\n\n```\n$ bosh deployment logsearch-manifest.yml\n$ bosh run errand enable_shard_allocation\n```\n\nTo take advantage of this errand, make sure to regenerate your manifest with the `scripts/generate_deployment_manifest` script.\n\n#### Reverse proxying to kibana\n\nThe haproxy job can now be configured to act as a reverse proxy to kibana allowing basic auth to be enabled.\n\n``` yaml\njobs:\n- name: haproxy\n  instances: 1\n  properties:\n    haproxy:\n      kibana:\n        inbound_port: 5601\n        backend_servers: [\u003ckibana_internal_ips\u003e]\n        backend_port: 5601\n        auth:\n          username: admin\n          password: password\n```\n\n#### Kibana plugins\n\nIt is possible to specify plugins to be installed for kibana\n\n``` yaml\njobs:\n- name: kibana\n  properties:\n    kibana:\n      plugins:\n        someplugin: /var/vcap/packages/co-located-kibana-plugin/plugin.zip\n        someotherplugin: elasticsearch/marvel/latest\n        anotherplugin: https://some.sample.url/directory\n```\n\n#### Kibana environment variables\n\n``` yaml\njobs:\n- name: kibana\n  properties:\n    kibana:\n      env:\n        SOMEVARIABLE: AWESOME_VALUE\n```\n\n## Known limitations\n\n### Cluster update process\n\nIn order to guarantee a safe upgrade without risk of losing data, we disable shard allocation for the duration of the deployment process. New indices cannot be created during this time. It can affect log ingestion during deploy if more elaborate index patterns are used in the deployment such as index per log type or hourly indexes. Logs are not lost though, they will wait in the queue until the cluster resumes normal operation.\n\nWARNING:  If you are running with more than 1 replica / index, your cluster might also become red during updates.\n"
}