[
  {
    "Name": "haproxy",
    "Description": "The HAProxy server can be used to terminate SSL in front of the Routers. Each HAProxy instance should point to multiple Routers.",
    "MonitTemplate": {
      "SrcPathEnd": "monit",
      "DstPathEnd": "monit",
      "Path": "/tmp/tar-CmdExtractor297519847/monit"
    },
    "Templates": [
      {
        "SrcPathEnd": "blacklist_cidrs.txt.erb",
        "DstPathEnd": "config/blacklist_cidrs.txt",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/blacklist_cidrs.txt.erb"
      },
      {
        "SrcPathEnd": "certs.ttar.erb",
        "DstPathEnd": "config/certs.ttar",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/certs.ttar.erb"
      },
      {
        "SrcPathEnd": "backend-ca-certs.erb",
        "DstPathEnd": "config/backend-ca-certs.pem",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/backend-ca-certs.erb"
      },
      {
        "SrcPathEnd": "client-revocation-list.erb",
        "DstPathEnd": "config/client-revocation-list.pem",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/client-revocation-list.erb"
      },
      {
        "SrcPathEnd": "properties.sh.erb",
        "DstPathEnd": "data/properties.sh",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/properties.sh.erb"
      },
      {
        "SrcPathEnd": "whitelist_cidrs.txt.erb",
        "DstPathEnd": "config/whitelist_cidrs.txt",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/whitelist_cidrs.txt.erb"
      },
      {
        "SrcPathEnd": "haproxy.config.erb",
        "DstPathEnd": "config/haproxy.config",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/haproxy.config.erb"
      },
      {
        "SrcPathEnd": "helpers/ctl_setup.sh",
        "DstPathEnd": "helpers/ctl_setup.sh",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/helpers/ctl_setup.sh"
      },
      {
        "SrcPathEnd": "helpers/ctl_utils.sh",
        "DstPathEnd": "helpers/ctl_utils.sh",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/helpers/ctl_utils.sh"
      },
      {
        "SrcPathEnd": "haproxy_ctl",
        "DstPathEnd": "bin/haproxy_ctl",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/haproxy_ctl"
      },
      {
        "SrcPathEnd": "monit_debugger",
        "DstPathEnd": "bin/monit_debugger",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/monit_debugger"
      },
      {
        "SrcPathEnd": "client-ca-certs.erb",
        "DstPathEnd": "config/client-ca-certs.pem",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/client-ca-certs.erb"
      },
      {
        "SrcPathEnd": "ssl_redirect.map.erb",
        "DstPathEnd": "config/ssl_redirect.map",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/ssl_redirect.map.erb"
      },
      {
        "SrcPathEnd": "backend-crt.erb",
        "DstPathEnd": "config/backend-crt.pem",
        "Path": "/tmp/tar-CmdExtractor297519847/templates/backend-crt.erb"
      }
    ],
    "DeploymentJobTemplates": null,
    "Packages": [
      {
        "Name": "haproxy"
      },
      {
        "Name": "ttar"
      }
    ],
    "Properties": [
      {
        "Name": "ha_proxy.ssl_ciphers",
        "Description": "List of SSL Ciphers that are passed to HAProxy",
        "Default": "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.hsts_enable",
        "Description": "Enables HSTS(Strict-Transport-Security Header) for all the SSL/TLS listeners",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.disable_tls_10",
        "Description": "Disable TLS 1.0 in HA Proxy",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.request_timeout",
        "Description": "Timeout (in floating point seconds) applied to any connection to limit the maximum time for a complete HTTP request (headers only). Used to limit DoS attacks that send data slowly to not trigger the client/server timeouts",
        "Default": 5,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.queue_timeout",
        "Description": "Timeout (in floating point seconds) used on any connection sitting in the pending queue, waiting to be sent to the backend, to limit its time being queued",
        "Default": 30,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.log_level",
        "Description": "Log level",
        "Default": "info",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.disable_tls_11",
        "Description": "Disable TLS 1.1 in HA Proxy",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.backend_servers",
        "Description": "Array of the router IPs acting as the HTTP/TCP backends (should include servers all Availability Zones being used)",
        "Default": [],
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.rsp_headers",
        "Description": "Hash of custom headers you wish you have set on each request. Spaces are automatically escaped, but any other haproxy delimiters will need to be escaped manually",
        "Default": null,
        "Example": "rsp_headers:\n  X-Application-ID: my-custom-header\n  MyCustomHeader: 3\n",
        "Examples": null
      },
      {
        "Name": "ha_proxy.backend_crt",
        "Description": "provides client certificate to backend server to do mutual ssl",
        "Default": null,
        "Example": "-----BEGIN CERTIFICATE-----\n******\n-----END CERTIFICATE-----\n-----BEGIN PRIVATE KEY-----\n******\n-----END PRIVATE KEY-----\n",
        "Examples": null
      },
      {
        "Name": "ha_proxy.ssl_pem",
        "Description": "Array of private keys and certificates used for TLS handshakes with downstream clients. Each element in the array is an object containing fields 'cert_chain' and 'private_key',\neach of which supports a PEM block. Each element can also be a single string containing the cert chain and the private key.\n",
        "Default": null,
        "Example": {
          "ssl_pem": [
            {
              "cert_chain": "-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n",
              "private_key": "-----BEGIN RSA PRIVATE KEY-----\n-----END RSA PRIVATE KEY-----\n"
            },
            "-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n-----BEGIN RSA PRIVATE KEY-----\n-----END RSA PRIVATE KEY-----\n"
          ]
        },
        "Examples": null
      },
      {
        "Name": "ha_proxy.disable_http",
        "Description": "Disable port 80 traffic",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.stats_user",
        "Description": "User name to authenticate haproxy stats",
        "Default": null,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.client_cert",
        "Description": "Enable haproxy mutual auth and produce a client cert header (X-Forwarded-Client-Cert) to offload mutual ssl client certificate to backend",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.enable_health_check_http",
        "Description": "Optionally enable http health-check on `haproxy_ip:8080/health`. It shows `200 OK` if \u003e0 backend servers are up.",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.routed_backend_servers",
        "Description": "Hash of the URL prefixes -\u003e array of the router IPs acting as the HTTP/TCP backends (should include servers all Availability Zones being used)",
        "Default": {},
        "Example": {
          "routed_backend_servers": {
            "/images": {
              "backend_ssl": "verify",
              "backend_verifyhost": "example.com",
              "port": 4443,
              "servers": [
                "10.0.0.2",
                "10.0.0.3"
              ]
            }
          }
        },
        "Examples": null
      },
      {
        "Name": "ha_proxy.hsts_max_age",
        "Description": "max-age value for the Strict-Transport-Security header",
        "Default": 31536000,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.disable_tls_tickets",
        "Description": "Improve (Perfect) Forward Secrecy by disabling TLS tickets",
        "Default": true,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.crt_list",
        "Description": "Array of private keys and certificates used for TLS handshakes with downstream clients. Each element in the array is an object containing at least the field 'ssl_pem'.\nThe field 'ssl_pem' itself is either an object containing fields 'cert_chain' and 'private_key', or a single string containing the cert chain and the private key.\nThe following fields are optional:\n- 'client_ca_file' (replaces ha_proxy.client_ca_file)\n- 'verify' (allowed values: [none|optional|required])\n- 'ssl_ciphers' (overrides ha_proxy.ssl_ciphers)\n- 'client_revocation_list' (replaces ha_proxy.client_revocation_list)\n- 'snifilter' (either a string or an array of strings)\nThe global option ha_proxy.client_cert has to be set to 'true', if there are crt_list entries with mutual auth configuration ('client_ca_file', 'client_revocation_list' and 'verify'!='none')\nTo avoid confusing configurations, it's not allowed to specify 'client_ca_file' and 'client_revocation_list' both globally AND in crt_list entries.\n",
        "Default": null,
        "Example": {
          "crt_list": [
            {
              "ssl_pem": "-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n-----BEGIN RSA PRIVATE KEY-----\n-----END RSA PRIVATE KEY-----\n"
            },
            {
              "client_ca_file": "-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n",
              "client_revocation_list": "-----BEGIN X509 CRL-----\n-----END X509 CRL-----\n-----BEGIN X509 CRL-----\n-----END X509 CRL-----\n",
              "snifilter": [
                "*.domain.tld",
                "!secure.domain.tld"
              ],
              "ssl_ciphers": "AES:ALL:!aNULL:!eNULL:+RC4:@STRENGTH",
              "ssl_pem": {
                "cert_chain": "-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n",
                "private_key": "-----BEGIN RSA PRIVATE KEY-----\n-----END RSA PRIVATE KEY-----\n"
              },
              "verify": "required"
            }
          ]
        },
        "Examples": null
      },
      {
        "Name": "ha_proxy.binding_ip",
        "Description": "If there are multiple ethernet interfaces, specify which one to bind",
        "Default": "",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.block_all",
        "Description": "Optionally block all incoming traffic to http(s). Use in conjunction with whitelist.",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.tcp_routing.port_range",
        "Description": "A range of ports for haproxy to listen on to enable CF TCP Routing. Used only if 'tcp_router' link is present.",
        "Default": "1024-1123",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.disable_tcp_accept_proxy",
        "Description": "Disables the PROXY protocol on tcp backends. Only applies if `ha_proxy.accept_proxy` is enabled.",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.internal_only_domains",
        "Description": "Array of domains for internal-only apps/services (not hostnames for the apps/services)",
        "Default": [],
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.strict_sni",
        "Description": "Optional setting to decide whether the SSL/TLS negotiation is allowed only if the client provided an SNI which strict match a certificate. If set to true, the default certificate is not used",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.tcp_link_health_check_http",
        "Description": "Optional port for http health check when using the tcp_backend link.",
        "Default": null,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.buffer_size_bytes",
        "Description": "Buffer size to use for requests, any requests larger than this (large cookies or query strings) will result in a gateway error",
        "Default": 16384,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.health_check_port",
        "Description": "port for http health-check",
        "Default": 8080,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.stats_password",
        "Description": "Password to authenticate haproxy stats",
        "Default": null,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.backend_port",
        "Description": "Listening port for Router",
        "Default": 80,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.client_ca_file",
        "Description": "path for CA certs to validate client certificate",
        "Default": null,
        "Example": "-----BEGIN CERTIFICATE-----\n******\n-----END CERTIFICATE-----\n-----BEGIN PRIVATE KEY-----\n******\n-----END PRIVATE KEY-----\n",
        "Examples": null
      },
      {
        "Name": "ha_proxy.backend_ca_file",
        "Description": "Optional SSL CA certificate chain (PEM file) concatenated together for backend SSL servers, only used when one of the `backend_ssl` options is set to `verify`",
        "Default": null,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.compress_types",
        "Description": "If this property is set, gzip compression will be activated for the mime types named in this property. definition like 'text/html text/plain text/css'",
        "Default": "",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.stats_enable",
        "Description": "If true, haproxy will enable a socket for stats. You can see the stats on `haproxy_ip:9000/haproxy_stats`. If multithreading is enabled (`ha_proxy.threads \u003e 1`) haproxy will create a separate socket and stat page for each thread. Each stat page is reachable on a different port ranging from `9000` to `9000 + ha_proxy.threads - 1`.",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.stats_uri",
        "Description": "URI used to access the stats UI.",
        "Default": "haproxy_stats",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.stats_bind",
        "Description": "Define listening address and port for the stats frontend. If multithreading is enabled (`ha_proxy.threads \u003e 1`) multiple stat pages are available - one for each thread. You can see the stat page for each thread on a separate port - starting at the defined port number.",
        "Default": "*:9000",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.backend_ssl_verifyhost",
        "Description": "Optional hostname to verify in the x509 certificate subject for SSL-enabled backend servers.  Requires `ha_proxy.backend_ssl` is set to `verify` when using this.",
        "Default": null,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.client_cert_ignore_err",
        "Description": "Error code(s) to ignore from verifying a client cert during a mutual ssl handshake, in a pipe-separated list. For example, 2 is if it cannot get the issuer certificate, 10 if the certificate has expired and 18 if the certificate is self-signed. The keyword 'all' will ignore all possible errors. See the openssl verify documentation [https://wiki.openssl.org/index.php/Manual:Verify(1)] for a full list of all error codes and their meanings.",
        "Default": null,
        "Example": "2|10|18",
        "Examples": null
      },
      {
        "Name": "ha_proxy.tcp",
        "Description": "List of mappings to perform tcp-based proxying on. See example for mapping datastructure and keys",
        "Default": [],
        "Example": {
          "tcp": [
            {
              "backend_port": 80,
              "backend_servers": [
                "10.20.10.10",
                "10.20.10.11"
              ],
              "backend_ssl": "verify",
              "backend_verifyhost": "example.com",
              "balance": "roundrobin",
              "health_check_http": 4444,
              "name": "wss",
              "port": 4443,
              "ssl": true
            }
          ]
        },
        "Examples": null
      },
      {
        "Name": "ha_proxy.tcp_link_port",
        "Description": "Port haproxy should listen on when using the tcp_backend link",
        "Default": null,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.https_redirect_all",
        "Description": "If this is set to 'true', a https redirect rule for all http calls will be put in the config file",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.server_timeout",
        "Description": "Timeout (in floating point seconds) used on connections from haproxy to a backend, while waiting for data from the backend",
        "Default": 30,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.enable_4443",
        "Description": "Enables port 4443 for backwards compatibility with WSS-based apps using the old CF haproxy",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.connect_timeout",
        "Description": "Timeout (in floating point seconds) used on connections from haproxy to a backend, while waiting for the TCP handshake to complete + connection to establish",
        "Default": 5,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.backend_ssl",
        "Description": "Optionally enable SSL verification for backend servers, one of `verify`, `noverify`, any other value assumes no ssl backend.  Setting `verify` requires `ha_proxy.backend_ca_file` key to be set.",
        "Default": "off",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.http_request_deny_conditions",
        "Description": "List of conditions to block http requests. Each condition consists of multiple rules combined with the AND operator",
        "Default": null,
        "Example": {
          "http_request_deny_conditions": [
            {
              "condition": [
                {
                  "acl_name": "block_host",
                  "acl_rule": "hdr_beg(host) -i login"
                },
                {
                  "acl_name": "block_reset_password_url",
                  "acl_rule": "path_beg,url_dec -m beg -i /reset_password"
                }
              ]
            }
          ]
        },
        "Examples": null
      },
      {
        "Name": "ha_proxy.hsts_preload",
        "Description": "This enables the preload flag for HSTS",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.syslog_server",
        "Description": "An IPv4 address optionally followed by a colon and a UDP port. It can also be an IPv6 address or filesystem path to a UNIX domain socket.",
        "Default": "127.0.0.1",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.trusted_domain_cidrs",
        "Description": "Space separated trusted cidr blocks for internal_only_domains",
        "Default": "0.0.0.0/32",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.websocket_timeout",
        "Description": "Timeout (in floating point seconds) used on websocket/tunnel traffic, when both ends of the conversation have become inactive",
        "Default": 3600,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.headers",
        "Description": "Hash of custom headers you wish you have set on each request. Spaces are automatically escaped, but any other haproxy delimiters will need to be escaped manually",
        "Default": null,
        "Example": "headers:\n  X-Application-ID: my-custom-header\n  MyCustomHeader: 3\n",
        "Examples": null
      },
      {
        "Name": "ha_proxy.dns_hold",
        "Description": "DNS Hold time",
        "Default": "10s",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.accept_proxy",
        "Description": "Turned off by default. Enforces the use of the PROXY protocol for all incoming connections to all frontends. When enabled standard tcp connections to these port no longer work.",
        "Default": false,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.threads",
        "Description": "Optional number of threads per VM",
        "Default": 1,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.default_dh_param",
        "Description": "Maximum size of DH params when generating epmehmeral keys during key exchange",
        "Default": 2048,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.keepalive_timeout",
        "Description": "Timeout (in floating point seconds) applied to any connection that is in an http-keepalive state, waiting for the next request to occur",
        "Default": 0.5,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.trusted_stats_cidrs",
        "Description": "Trusted ip range that can access the stats UI",
        "Default": "0.0.0.0/32",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.client_revocation_list",
        "Description": "provide a list of revocation certs",
        "Default": null,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.resolvers",
        "Description": "List of DNS servers",
        "Default": null,
        "Example": {
          "resolvers": [
            {
              "private": "10.0.0.2"
            },
            {
              "public": "8.8.8.8"
            }
          ]
        },
        "Examples": null
      },
      {
        "Name": "ha_proxy.cidr_blacklist",
        "Description": "List of CIDRs to block for http(s). Format is string array of CIDRs or single string of base64 encoded gzip.",
        "Default": null,
        "Example": {
          "cidr_blacklist": [
            "10.0.0.0/8",
            "192.168.2.0/24"
          ]
        },
        "Examples": null
      },
      {
        "Name": "ha_proxy.cidr_whitelist",
        "Description": "List of CIDRs to allow for http(s). Format is string array of CIDRs or single string of base64 encoded gzip.",
        "Default": null,
        "Example": {
          "cidr_whitelist": [
            "172.168.4.1/32",
            "10.2.0.0/16"
          ]
        },
        "Examples": null
      },
      {
        "Name": "ha_proxy.https_redirect_domains",
        "Description": "For each domain in this array, a HTTPS redirect rule will be put in the config file. Redirect will be applied for all subdomains",
        "Default": [],
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.client_timeout",
        "Description": "Timeout (in floating point seconds) used on connections from a client to haproxy that have gone inactive",
        "Default": 30,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "ha_proxy.hsts_include_subdomains",
        "Description": "This enables the includeSubDomains flag for HSTS.",
        "Default": false,
        "Example": null,
        "Examples": null
      }
    ]
  },
  {
    "Name": "keepalived",
    "Description": "The keepalived job can be used to add a VRRP IP address to enforce HA on haproxy release",
    "MonitTemplate": {
      "SrcPathEnd": "monit",
      "DstPathEnd": "monit",
      "Path": "/tmp/tar-CmdExtractor437398961/monit"
    },
    "Templates": [
      {
        "SrcPathEnd": "keepalived_ctl",
        "DstPathEnd": "bin/keepalived_ctl",
        "Path": "/tmp/tar-CmdExtractor437398961/templates/keepalived_ctl"
      },
      {
        "SrcPathEnd": "keepalived.config.erb",
        "DstPathEnd": "config/keepalived.config.template",
        "Path": "/tmp/tar-CmdExtractor437398961/templates/keepalived.config.erb"
      }
    ],
    "DeploymentJobTemplates": null,
    "Packages": [
      {
        "Name": "keepalived"
      }
    ],
    "Properties": [
      {
        "Name": "keepalived.virtual_router_id",
        "Description": "Specifies the VRRP virtual router identifier (VRID)(numerical from 1 to 255). A unique VRID value is needed for each VRRP cluster",
        "Default": 1,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "keepalived.vip",
        "Description": "Virtual IP V4 address that will be given to master",
        "Default": null,
        "Example": null,
        "Examples": null
      },
      {
        "Name": "keepalived.healthcheck_name",
        "Description": "label displayed for the health check. Will appear in keepalive traces e.g. \"Keepalived_vrrp[4558] VRRP_Script(check_haproxy) failed\"",
        "Default": "check_haproxy",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "keepalived.healthcheck_command",
        "Description": "when health check fails, this triggers a fail over. The default command checks the haproxy process is still alive.",
        "Default": "killall -0 haproxy",
        "Example": null,
        "Examples": null
      },
      {
        "Name": "keepalived.interface",
        "Description": "interface keepalived will use to mount the VIP. If set to 'auto', uses the default interface on the VM",
        "Default": "auto",
        "Example": null,
        "Examples": null
      }
    ]
  }
]